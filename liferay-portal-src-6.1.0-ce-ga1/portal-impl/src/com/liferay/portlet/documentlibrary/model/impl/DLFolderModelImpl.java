/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.portlet.documentlibrary.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.documentlibrary.model.DLFolder;
import com.liferay.portlet.documentlibrary.model.DLFolderModel;
import com.liferay.portlet.documentlibrary.model.DLFolderSoap;
import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * The base model implementation for the DLFolder service. Represents a row in the &quot;DLFolder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.portlet.documentlibrary.model.DLFolderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DLFolderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DLFolderImpl
 * @see com.liferay.portlet.documentlibrary.model.DLFolder
 * @see com.liferay.portlet.documentlibrary.model.DLFolderModel
 * @generated
 */
@JSON(strict = true)
public class DLFolderModelImpl extends BaseModelImpl<DLFolder>
	implements DLFolderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a document library folder model instance should use the {@link com.liferay.portlet.documentlibrary.model.DLFolder} interface instead.
	 */
	public static final String TABLE_NAME = "DLFolder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "folderId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "repositoryId", Types.BIGINT },
			{ "mountPoint", Types.BOOLEAN },
			{ "parentFolderId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "lastPostDate", Types.TIMESTAMP },
			{ "defaultFileEntryTypeId", Types.BIGINT },
			{ "overrideFileEntryTypes", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table DLFolder (uuid_ VARCHAR(75) null,folderId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,repositoryId LONG,mountPoint BOOLEAN,parentFolderId LONG,name VARCHAR(100) null,description STRING null,lastPostDate DATE null,defaultFileEntryTypeId LONG,overrideFileEntryTypes BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table DLFolder";
	public static final String ORDER_BY_JPQL = " ORDER BY dlFolder.parentFolderId ASC, dlFolder.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY DLFolder.parentFolderId ASC, DLFolder.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.liferay.portlet.documentlibrary.model.DLFolder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.liferay.portlet.documentlibrary.model.DLFolder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.column.bitmask.enabled.com.liferay.portlet.documentlibrary.model.DLFolder"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long MOUNTPOINT_COLUMN_BITMASK = 4L;
	public static long NAME_COLUMN_BITMASK = 8L;
	public static long PARENTFOLDERID_COLUMN_BITMASK = 16L;
	public static long REPOSITORYID_COLUMN_BITMASK = 32L;
	public static long UUID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DLFolder toModel(DLFolderSoap soapModel) {
		DLFolder model = new DLFolderImpl();

		model.setUuid(soapModel.getUuid());
		model.setFolderId(soapModel.getFolderId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setRepositoryId(soapModel.getRepositoryId());
		model.setMountPoint(soapModel.getMountPoint());
		model.setParentFolderId(soapModel.getParentFolderId());
		model.setName(soapModel.getName());
		model.setDescription(soapModel.getDescription());
		model.setLastPostDate(soapModel.getLastPostDate());
		model.setDefaultFileEntryTypeId(soapModel.getDefaultFileEntryTypeId());
		model.setOverrideFileEntryTypes(soapModel.getOverrideFileEntryTypes());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DLFolder> toModels(DLFolderSoap[] soapModels) {
		List<DLFolder> models = new ArrayList<DLFolder>(soapModels.length);

		for (DLFolderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final String MAPPING_TABLE_DLFILEENTRYTYPES_DLFOLDERS_NAME = "DLFileEntryTypes_DLFolders";
	public static final Object[][] MAPPING_TABLE_DLFILEENTRYTYPES_DLFOLDERS_COLUMNS =
		{
			{ "fileEntryTypeId", Types.BIGINT },
			{ "folderId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_DLFILEENTRYTYPES_DLFOLDERS_SQL_CREATE =
		"create table DLFileEntryTypes_DLFolders (fileEntryTypeId LONG not null,folderId LONG not null,primary key (fileEntryTypeId, folderId))";
	public static final boolean FINDER_CACHE_ENABLED_DLFILEENTRYTYPES_DLFOLDERS = GetterUtil.getBoolean(com.liferay.portal.util.PropsUtil.get(
				"value.object.finder.cache.enabled.DLFileEntryTypes_DLFolders"),
			true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.portal.util.PropsUtil.get(
				"lock.expiration.time.com.liferay.portlet.documentlibrary.model.DLFolder"));

	public DLFolderModelImpl() {
	}

	public long getPrimaryKey() {
		return _folderId;
	}

	public void setPrimaryKey(long primaryKey) {
		setFolderId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_folderId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return DLFolder.class;
	}

	public String getModelClassName() {
		return DLFolder.class.getName();
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getFolderId() {
		return _folderId;
	}

	public void setFolderId(long folderId) {
		_folderId = folderId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getRepositoryId() {
		return _repositoryId;
	}

	public void setRepositoryId(long repositoryId) {
		_columnBitmask |= REPOSITORYID_COLUMN_BITMASK;

		if (!_setOriginalRepositoryId) {
			_setOriginalRepositoryId = true;

			_originalRepositoryId = _repositoryId;
		}

		_repositoryId = repositoryId;
	}

	public long getOriginalRepositoryId() {
		return _originalRepositoryId;
	}

	@JSON
	public boolean getMountPoint() {
		return _mountPoint;
	}

	public boolean isMountPoint() {
		return _mountPoint;
	}

	public void setMountPoint(boolean mountPoint) {
		_columnBitmask |= MOUNTPOINT_COLUMN_BITMASK;

		if (!_setOriginalMountPoint) {
			_setOriginalMountPoint = true;

			_originalMountPoint = _mountPoint;
		}

		_mountPoint = mountPoint;
	}

	public boolean getOriginalMountPoint() {
		return _originalMountPoint;
	}

	@JSON
	public long getParentFolderId() {
		return _parentFolderId;
	}

	public void setParentFolderId(long parentFolderId) {
		_columnBitmask = -1L;

		if (!_setOriginalParentFolderId) {
			_setOriginalParentFolderId = true;

			_originalParentFolderId = _parentFolderId;
		}

		_parentFolderId = parentFolderId;
	}

	public long getOriginalParentFolderId() {
		return _originalParentFolderId;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	public Date getLastPostDate() {
		return _lastPostDate;
	}

	public void setLastPostDate(Date lastPostDate) {
		_lastPostDate = lastPostDate;
	}

	@JSON
	public long getDefaultFileEntryTypeId() {
		return _defaultFileEntryTypeId;
	}

	public void setDefaultFileEntryTypeId(long defaultFileEntryTypeId) {
		_defaultFileEntryTypeId = defaultFileEntryTypeId;
	}

	@JSON
	public boolean getOverrideFileEntryTypes() {
		return _overrideFileEntryTypes;
	}

	public boolean isOverrideFileEntryTypes() {
		return _overrideFileEntryTypes;
	}

	public void setOverrideFileEntryTypes(boolean overrideFileEntryTypes) {
		_overrideFileEntryTypes = overrideFileEntryTypes;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public DLFolder toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (DLFolder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		if (_expandoBridge == null) {
			_expandoBridge = ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
					DLFolder.class.getName(), getPrimaryKey());
		}

		return _expandoBridge;
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		getExpandoBridge().setAttributes(serviceContext);
	}

	@Override
	public Object clone() {
		DLFolderImpl dlFolderImpl = new DLFolderImpl();

		dlFolderImpl.setUuid(getUuid());
		dlFolderImpl.setFolderId(getFolderId());
		dlFolderImpl.setGroupId(getGroupId());
		dlFolderImpl.setCompanyId(getCompanyId());
		dlFolderImpl.setUserId(getUserId());
		dlFolderImpl.setUserName(getUserName());
		dlFolderImpl.setCreateDate(getCreateDate());
		dlFolderImpl.setModifiedDate(getModifiedDate());
		dlFolderImpl.setRepositoryId(getRepositoryId());
		dlFolderImpl.setMountPoint(getMountPoint());
		dlFolderImpl.setParentFolderId(getParentFolderId());
		dlFolderImpl.setName(getName());
		dlFolderImpl.setDescription(getDescription());
		dlFolderImpl.setLastPostDate(getLastPostDate());
		dlFolderImpl.setDefaultFileEntryTypeId(getDefaultFileEntryTypeId());
		dlFolderImpl.setOverrideFileEntryTypes(getOverrideFileEntryTypes());

		dlFolderImpl.resetOriginalValues();

		return dlFolderImpl;
	}

	public int compareTo(DLFolder dlFolder) {
		int value = 0;

		if (getParentFolderId() < dlFolder.getParentFolderId()) {
			value = -1;
		}
		else if (getParentFolderId() > dlFolder.getParentFolderId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getName().toLowerCase()
					.compareTo(dlFolder.getName().toLowerCase());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		DLFolder dlFolder = null;

		try {
			dlFolder = (DLFolder)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = dlFolder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DLFolderModelImpl dlFolderModelImpl = this;

		dlFolderModelImpl._originalUuid = dlFolderModelImpl._uuid;

		dlFolderModelImpl._originalGroupId = dlFolderModelImpl._groupId;

		dlFolderModelImpl._setOriginalGroupId = false;

		dlFolderModelImpl._originalCompanyId = dlFolderModelImpl._companyId;

		dlFolderModelImpl._setOriginalCompanyId = false;

		dlFolderModelImpl._originalRepositoryId = dlFolderModelImpl._repositoryId;

		dlFolderModelImpl._setOriginalRepositoryId = false;

		dlFolderModelImpl._originalMountPoint = dlFolderModelImpl._mountPoint;

		dlFolderModelImpl._setOriginalMountPoint = false;

		dlFolderModelImpl._originalParentFolderId = dlFolderModelImpl._parentFolderId;

		dlFolderModelImpl._setOriginalParentFolderId = false;

		dlFolderModelImpl._originalName = dlFolderModelImpl._name;

		dlFolderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DLFolder> toCacheModel() {
		DLFolderCacheModel dlFolderCacheModel = new DLFolderCacheModel();

		dlFolderCacheModel.uuid = getUuid();

		String uuid = dlFolderCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dlFolderCacheModel.uuid = null;
		}

		dlFolderCacheModel.folderId = getFolderId();

		dlFolderCacheModel.groupId = getGroupId();

		dlFolderCacheModel.companyId = getCompanyId();

		dlFolderCacheModel.userId = getUserId();

		dlFolderCacheModel.userName = getUserName();

		String userName = dlFolderCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dlFolderCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dlFolderCacheModel.createDate = createDate.getTime();
		}
		else {
			dlFolderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dlFolderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dlFolderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dlFolderCacheModel.repositoryId = getRepositoryId();

		dlFolderCacheModel.mountPoint = getMountPoint();

		dlFolderCacheModel.parentFolderId = getParentFolderId();

		dlFolderCacheModel.name = getName();

		String name = dlFolderCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			dlFolderCacheModel.name = null;
		}

		dlFolderCacheModel.description = getDescription();

		String description = dlFolderCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			dlFolderCacheModel.description = null;
		}

		Date lastPostDate = getLastPostDate();

		if (lastPostDate != null) {
			dlFolderCacheModel.lastPostDate = lastPostDate.getTime();
		}
		else {
			dlFolderCacheModel.lastPostDate = Long.MIN_VALUE;
		}

		dlFolderCacheModel.defaultFileEntryTypeId = getDefaultFileEntryTypeId();

		dlFolderCacheModel.overrideFileEntryTypes = getOverrideFileEntryTypes();

		return dlFolderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", folderId=");
		sb.append(getFolderId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", repositoryId=");
		sb.append(getRepositoryId());
		sb.append(", mountPoint=");
		sb.append(getMountPoint());
		sb.append(", parentFolderId=");
		sb.append(getParentFolderId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", lastPostDate=");
		sb.append(getLastPostDate());
		sb.append(", defaultFileEntryTypeId=");
		sb.append(getDefaultFileEntryTypeId());
		sb.append(", overrideFileEntryTypes=");
		sb.append(getOverrideFileEntryTypes());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.liferay.portlet.documentlibrary.model.DLFolder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>folderId</column-name><column-value><![CDATA[");
		sb.append(getFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>repositoryId</column-name><column-value><![CDATA[");
		sb.append(getRepositoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mountPoint</column-name><column-value><![CDATA[");
		sb.append(getMountPoint());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentFolderId</column-name><column-value><![CDATA[");
		sb.append(getParentFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastPostDate</column-name><column-value><![CDATA[");
		sb.append(getLastPostDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultFileEntryTypeId</column-name><column-value><![CDATA[");
		sb.append(getDefaultFileEntryTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>overrideFileEntryTypes</column-name><column-value><![CDATA[");
		sb.append(getOverrideFileEntryTypes());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DLFolder.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			DLFolder.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _folderId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _repositoryId;
	private long _originalRepositoryId;
	private boolean _setOriginalRepositoryId;
	private boolean _mountPoint;
	private boolean _originalMountPoint;
	private boolean _setOriginalMountPoint;
	private long _parentFolderId;
	private long _originalParentFolderId;
	private boolean _setOriginalParentFolderId;
	private String _name;
	private String _originalName;
	private String _description;
	private Date _lastPostDate;
	private long _defaultFileEntryTypeId;
	private boolean _overrideFileEntryTypes;
	private transient ExpandoBridge _expandoBridge;
	private long _columnBitmask;
	private DLFolder _escapedModelProxy;
}