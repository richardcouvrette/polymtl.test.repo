<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
String languageId = LanguageUtil.getLanguageId(request);

if (Validator.isNull(script)) {
	script = structure.getXsd();
	scriptJSONArray = DDMXSDUtil.getJSONArray(script);
}

if (scriptJSONArray != null) {
	scriptJSONArray = _addDetailTemplateFieldAttributes(structure, scriptJSONArray);
}

String namespace = renderResponse.getNamespace();

if (Validator.isNotNull(portletResourceNamespace)){
	namespace = portletResourceNamespace;
}
%>

<aui:input name="language" type="hidden" value="xsd" />
<aui:input name="script" type="hidden" />

<aui:script>
	Liferay.provide(
		window,
		'<portlet:namespace />saveTemplate',
		function() {
			document.<portlet:namespace />fm.<portlet:namespace />script.value = window.<portlet:namespace />formBuilder.getXSD();

			submitForm(document.<portlet:namespace />fm);
		},
		['aui-base']
	);
</aui:script>

<aui:script use="liferay-portlet-dynamic-data-mapping">
	var availableFields = A.Array(<%= scriptJSONArray.toString() %>);

	A.Array.each(
		availableFields,
		function(item, index, collection) {
			item.iconClass = Liferay.FormBuilder.DEFAULT_ICON_CLASS;
		}
	);

	window.<%= namespace %>structureAvailableFields = availableFields.concat(Liferay.FormBuilder.AVAILABLE_FIELDS.DDM_TEMPLATE);
</aui:script>

<%!
public JSONArray _addDetailTemplateFieldAttributes(DDMStructure structure, JSONArray scriptJSONArray) {
	for (int i = 0; i < scriptJSONArray.length(); i++) {
		JSONObject jsonObject = scriptJSONArray.getJSONObject(i);

		String fieldName = jsonObject.getString("name");

		try {
			jsonObject.put("readOnlyAttributes", _getFieldReadOnlyAttributes(structure, fieldName));
			jsonObject.put("unique", true);
		}
		catch (StructureFieldException sfe) {
		}
	}

	return scriptJSONArray;
}

public JSONArray _getFieldReadOnlyAttributes(DDMStructure structure, String fieldName) throws StructureFieldException {
	JSONArray readOnlyAttributesJSONArray = JSONFactoryUtil.createJSONArray();

	readOnlyAttributesJSONArray.put("name");
	readOnlyAttributesJSONArray.put("options");

	boolean required = structure.getFieldRequired(fieldName);

	if (required) {
		readOnlyAttributesJSONArray.put("required");
	}

	return readOnlyAttributesJSONArray;
}
%>