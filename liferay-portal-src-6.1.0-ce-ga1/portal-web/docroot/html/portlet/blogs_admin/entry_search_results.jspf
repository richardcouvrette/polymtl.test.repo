<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<%
if (Validator.isNull(searchTerms.getKeywords())) {
	results = BlogsEntryLocalServiceUtil.getGroupEntries(scopeGroupId, WorkflowConstants.STATUS_ANY, searchContainer.getStart(), searchContainer.getEnd());
	total = BlogsEntryLocalServiceUtil.getGroupEntriesCount(scopeGroupId, WorkflowConstants.STATUS_ANY);
}
else {
	Indexer indexer = IndexerRegistryUtil.getIndexer(BlogsEntry.class);

	SearchContext searchContext = SearchContextFactory.getInstance(request);

	searchContext.setEnd(searchContainer.getEnd());
	searchContext.setKeywords(searchTerms.getKeywords());
	searchContext.setStart(searchContainer.getStart());

	Hits hits = indexer.search(searchContext);

	total = hits.getLength();

	for (int i = 0; i < hits.getDocs().length; i++) {
		Document doc = hits.doc(i);

		long entryId = GetterUtil.getLong(doc.get(Field.ENTRY_CLASS_PK));

		BlogsEntry entry = null;

		try {
			entry = BlogsEntryLocalServiceUtil.getEntry(entryId);

			entry = entry.toEscapedModel();
		}
		catch (Exception e) {
			if (_log.isWarnEnabled()) {
				_log.warn("Blogs search index is stale and contains entry " + entryId);
			}

			continue;
		}

		results.add(entry);
	}
}

pageContext.setAttribute("results", results);
pageContext.setAttribute("total", total);
%>

<%!
private static Log _log = LogFactoryUtil.getLog("portal-web.docroot.html.portlet.blogs_admin.entry_search_results_jspf");
%>