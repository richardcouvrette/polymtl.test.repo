<%--
/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */
--%>

<aui:script use="aui-io-request,io-upload-iframe,liferay-portlet-dynamic-data-lists,liferay-portlet-url">
	var SpreadSheet = Liferay.SpreadSheet;

	var STR_EMPTY = '';

	var DEFAULTS_FORM_VALIDATOR = AUI.defaults.FormValidator;

	DEFAULTS_FORM_VALIDATOR.RULES.requiredFields = function(value) {
		var spreadSheet = window.<portlet:namespace />spreadSheet;

		var activeColumn = spreadSheet.selection.getActiveColumn();

		var activeColumnKey = activeColumn.get('key');

		var activeRecord = spreadSheet.selection.getActiveRecord();

		return !A.Array.some(
			window.<portlet:namespace />structure,
			function(item, index, collection) {
				var fieldName = item.name;
				var fieldValue = activeRecord.getValue(fieldName);

				return !fieldValue && (activeColumnKey !== fieldName) && (item.required === 'true');
			}
		);
	};

	DEFAULTS_FORM_VALIDATOR.STRINGS.requiredFields = '<%= UnicodeLanguageUtil.get(pageContext, "please-fill-out-all-required-fields") %>';

	var FileUploadCellEditor = A.Component.create(
		{
			ATTRS: {
				record: {
					value: null
				},

				recordset: {
					value: null
				},

				recordsetId: {
					value: null
				},

				structure: {
					value: null
				}
			},

			EXTENDS: A.BaseCellEditor,

			NAME: 'fileupload-cell-editor',

			UI_ATTRS: ['structure', 'value'],

			prototype: {
				ELEMENT_TEMPLATE: '<input type="file" />',

				deleteFile: function() {
					var instance = this;

					var fieldName = instance.get('elementName');
					var record = instance.get('record');
					var recordset = instance.get('recordset');

					instance.set('value', STR_EMPTY);

					recordset.updateRecordDataByKey(record, fieldName, STR_EMPTY);

					instance.hide();
				},

				getElementsValue: function() {
					var instance = this;

					return instance.get('value');
				},

				uploadFile: function(callback) {
					var instance = this;

					var elementName = instance.get('elementName');
					var record = instance.get('record');
					var recordData = record.get('data');
					var recordset = instance.get('recordset');

					var portletURL = Liferay.PortletURL.createResourceURL();

					portletURL.setParameter('ddmStructureId', <%= ddmStructure.getStructureId() %>);
					portletURL.setParameter('fieldName', elementName);
					portletURL.setParameter('groupId', themeDisplay.getScopeGroupId());
					portletURL.setParameter('recordId', recordData.recordId);
					portletURL.setParameter('struts_action', '/dynamic_data_list_display/edit_record_file');

					portletURL.setPortletId('<%= PortletKeys.DYNAMIC_DATA_LIST_DISPLAY %>');

					portletURL.setWindowState('pop_up');

					var uri = portletURL.toString();

					var form = instance.get('contentBox');

					setTimeout(
						function() {
							A.io.request(
								uri,
								{
									dataType: 'json',
									form: {
										id: form,
										upload: true
									},
									method: 'POST',
									on: {
										complete: function(event, id, xhr) {
											var responseText = xhr.responseText;

											var data = SpreadSheet.Util.parseJSON(responseText);

											var exception = data.exception;

											if (exception) {
												instance._handleException(exception);
											}
											else {
												instance.set('value', responseText);

												if (callback) {
													callback.apply(instance, arguments);
												}
											}
										}
									}
								}
							);
						},
						0
					);
				},

				_handleDeleteEvent: function() {
					var instance = this;

					instance.deleteFile();
				},

				_handleDownloadEvent: function() {
					var instance = this;

					var value = instance.get('value');
					var data = SpreadSheet.Util.parseJSON(value);

					var url = [
						'/documents/ddl/',
						data.recordId,
						'/',
						instance.get('elementName')
					];

					location.href = url.join(STR_EMPTY);
				},

				_handleException: function(exception) {
					var instance = this;

					var errorMessage = STR_EMPTY;

					if (exception.indexOf('com.liferay.portlet.documentlibrary.FileSizeException') > -1) {
						errorMessage = '<%= LanguageUtil.format(locale, "upload-documents-no-larger-than-x-k", PrefsPropsUtil.getLong(PropsKeys.DL_FILE_MAX_SIZE) / 1024, false) %>';
					}
					else {
						errorMessage = '<%= UnicodeLanguageUtil.get(pageContext, "an-unexpected-error-occurred") %>';
					}

					instance._showErrorMessage(errorMessage);
				},

				_onSubmit: function(event) {
					var instance = this;

					var record = instance.get('record');
					var recordData = record.get('data');
					var recordset = instance.get('recordset');
					var displayIndex = recordset.getRecordIndex(record);
					var recordsetId = instance.get('recordsetId');

					var validator = event.validator;

					if (validator) {
						validator.formEvent.halt();
					}

					if (!recordData.recordId) {
						SpreadSheet.addRecord(
							recordsetId,
							displayIndex,
							{},
							function(response) {
								var exception = response.exception;

								if (exception) {
									instance._handleException(exception);
								}
								else {
									if (response.recordId > 0) {
										recordData.recordId = response.recordId;

										instance.uploadFile(instance._handleSaveEvent);
									}
								}
							}
						);
					}
					else {
						instance.uploadFile(instance._handleSaveEvent);
					}
				},

				_showErrorMessage: function(errorMessage) {
					var instance = this;

					var contentBox = instance.get('contentBox');

					var messageNode = A.Node.create('<div class="portlet-msg-error">' + errorMessage + '</div>');

					contentBox.prepend(messageNode);

					setTimeout(A.fn('remove', messageNode, null), 5000);
				},

				_syncElementsFocus: function() {
					var instance = this;

					instance.elements.val(STR_EMPTY);

					instance.validator.resetAllFields();
				},

				_uiSetStructure: function(val) {
					var instance = this;

					instance._uiSetValue(instance.get('value'));
				},

				_uiSetValue: function(val) {
					var instance = this;

					var toolbar = instance.toolbar;

					if (toolbar) {
						var value = SpreadSheet.Util.parseJSON(val);

						if (!value.recordId) {
							toolbar.remove('deleteEvent');
							toolbar.remove('downloadEvent');
						}
						else {
							toolbar.add(
								{
									handler: A.bind(instance._handleDownloadEvent, instance),
									id: 'downloadEvent',
									label: '<%= UnicodeLanguageUtil.get(pageContext, "download") %>'
								}
							);

							var structure = instance.get('structure');

							if (structure) {
								var fieldName = instance.get('elementName');

								var structureField = SpreadSheet.findStructureFieldByAttribute(structure, 'name', fieldName);

								if (structureField.required === 'false') {
									toolbar.add(
										{
											handler: A.bind(instance._handleDeleteEvent, instance),
											id: 'deleteEvent',
											label: '<%= UnicodeLanguageUtil.get(pageContext, "delete") %>'
										}
									);
								}
							}
						}
					}
				}
			}
		}
	);

	SpreadSheet.TYPE_EDITOR['ddm-fileupload'] = FileUploadCellEditor;
</aui:script>